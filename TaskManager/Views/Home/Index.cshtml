@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer

<div class="text-center">
<h1 class="display-4">@localizer["Title-My-Todos"]</h1>
<button type="button" class="btn btn-primary mb-3" onclick="addNewTask()">@localizer["btn:Add-new-task"]</button>
</div>


<div id="container-todos-list" class="text-center">
    <div id="reorderable" class="text-start" data-bind="foreach: todos">
        <div name="todo" class="border mb-2 p-2" style="cursor: pointer" data-bind="click: handelClickTodo">
            <div data-bind="text: title,hidden: isNew" class="fw-bold"></div>
            
            <div name="steps-resume" data-bind="visible:stepsTotal() > 0">
                <span data-bind="text:stepsDone"></span> /
                <span data-bind="text: stepsTotal"></span>
                <span data-bind="text: percentDone"></span>
            </div>
            
            <input type="text" name="title-todo" autocomplete="off" 
                   data-bind="value: title,visible: isNew,attr:{'data-id':id}, event: { focusout: managerFocusoutTitleTodo}"/>
        </div>
    </div>
    
    <div data-bind="visible: loading" class="spinner-border">
        <span class="visually-hidden">@localizer["loading"]</span>   
    </div>
    <div data-bind="visible: noTasks">
        @localizer["No-Tasks"]   
    </div>
</div>

<partial name="_TodoEditModal"/>

@section Scripts {
    <script src="~/js/todos.js" asp-append-version="true"></script>
    <script src="~/js/Utilities.js" asp-append-version="true"></script>
    <script src="~/js/steps.js" asp-append-version="true"></script>
    <script src="~/js/attachments.js" asp-append-version="true"></script>
    
    <script>
        
        const urlTodos = "/api/todos";
        const urlSteps = "/api/steps";
        const urlAttachments = "/api/files";
        
        const modalTodoEdit = document.getElementById("modal-todo-edit");
        const modalTodoEditBootstrap = new bootstrap.Modal(modalTodoEdit);
        
        function todoListViewModelFn(){
            var self = this;
            self.todos= ko.observableArray([]);
            self.loading= ko.observable(true);
            
            self.noTasks = ko.pureComputed(function(){
                if(self.loading()){
                    return false;
                }
                return self.todos().length === 0;
            });
        }
        
        function todoitemListViewModelFn({id, title,stepsTotal,stepsDone}){
            var self = this;
            self.id = ko.observable(id);
            self.title = ko.observable(title);
            
            self.stepsTotal = ko.observable(stepsTotal);
            self.stepsDone = ko.observable(stepsDone);
            
            self.isNew = ko.pureComputed(function(){
                return self.id() === 0;
            })
            
            self.percentDone = ko.pureComputed(function(){
                const calc = Math.round(self.stepsDone()*1.0/self.stepsTotal()*100);
                return `(${calc}%)`
            });
        }
        
        const todoEditVM = {
            id:0,
            title: ko.observable(''),
            description: ko.observable(''),
            steps: ko.observableArray([]),
            attachments: ko.observableArray([]),
        }
        
        function stepViewModel({id,description,isCompleted,isEditing}){
            var self = this;
            
            self.id = ko.observable(id||0);
            self.description = ko.observable(description||'');
            self.lastDescription = '';
            self.isCompleted = ko.observable(isCompleted);
            self.isEditing = ko.observable(isEditing);
            
            self.isNew = ko.pureComputed(function (){
                return self.id() == 0;
            });
        }
        
        const todoListViewModel = new todoListViewModelFn();
        
        function fileAttachedViewModel({id,title,published, isEditing,indexOrder,url}){
            var self =this;
            self.id=id;
            self.title=ko.observable(title||'');
            self.published = published;
            self.isEditing = ko.observable(isEditing);
            self.indexOrder = indexOrder;
            self.url = url;
        }
        
        getTodos();
        
        ko.applyBindings(todoListViewModel, document.getElementById('container-todos-list'));
        ko.applyBindings(todoEditVM, document.getElementById('modal-todo-edit'));
    </script>
}